SQL Activity Questions

1.ACTIVITY 1
In this activity, we will be creating a table:

First create a table in SQL using the CREATE command named salesman:

CREATE TABLE tableName;

The salesman table will have the following columns:

Name            | Datatype
----------------+-------------
salesman_id     | int
salesman_name   | varchar2(20)
salesman_city   | varchar2(20)
commission      | int

ACTIVITY 1
To see the datatype properties of the columns in the table, you can use the DESCRIBE command:

DESCRIBE salesman;

Output:

Column        | Null?    | Type
--------------+----------+-------------
SALESMAN_ID   | NOT NULL | NUMBER
SALESMAN_NAME | -        | VARCHAR2(32)
SALESMAN_CITY | -        | VARCHAR2(32)
COMMISSION    | -        | NUMBER

ACTIVITY 2
In this activity, we will be inserting values in the table created in the last activity.

Add the following values to the salesman table.


 salesman_id | salesman_name  |   salesman_city  | commission
-------------+----------------+------------------+------------
        5001 | James Hoog     | New York         |    15
        5002 | Nail Knite     | Paris            |    13
        5005 | Pit Alex       | London           |    11
        5006 | McLyon         | Paris            |    14
        5007 | Paul Adam      | Rome             |    13
        5003 | Lauson Hen     | San Jose         |    12
		
Use the INSERT command to add values to the table:

INSERT INTO table_name
VALUES (value1, value2, value3, ...); 

Once all the data has been inserted into the table, use the SELECT command to view the results:

--View data from all columns
SELECT * FROM salesman;

ACTIVITY 3

In this activity, we will be writing different SELECT statements with WHERE clause.

Write SELECT statements for the following outputs:

*Show data from the salesman_id and salesman_city columns

*Show data of salesman from Paris

*Show salesman_id and commission of Paul Adam

ACTIVITY 4
In this activity, we will be modifying the salesman table.

Add a new column - grade - to the salesman table. The grade will be integer values.
Set the value in the grade column for everyone to 100.
Use SELECT command to display the results.

-- To alter table structure
ALTER TABLE table_name ...

-- To update data in the table
UPDATE table_name SET ...

ACTIVITY 5
In this activity we will be updating the data in the salesman table.

Update the grade score of salesmen from Rome to 200.
Update the grade score of James Hoog to 300.
Update the name McLyon to Pierre.


-- To update data in the table
UPDATE table_name SET ... WHERE ...

ACTIVITY 6
In this activity we will be sorting data from a table. Before starting the activity, run following queries to create the table:

-- Create a table named orders
create table orders(
    order_no int primary key, purchase_amount float, order_date date,
    customer_id int, salesman_id int);

-- Add values to the table
INSERT ALL
    INTO orders VALUES(70001, 150.5, TO_DATE('2012/10/05', 'YYYY/MM/DD'), 3005, 5002) 
    INTO orders VALUES(70009, 270.65, TO_DATE('2012/09/10', 'YYYY/MM/DD'), 3001, 5005)
    INTO orders VALUES(70002, 65.26, TO_DATE('2012/10/05', 'YYYY/MM/DD'), 3002, 5001)
    INTO orders VALUES(70004, 110.5, TO_DATE('2012/08/17', 'YYYY/MM/DD'), 3009, 5003)
    INTO orders VALUES(70007, 948.5, TO_DATE('2012/09/10', 'YYYY/MM/DD'), 3005, 5002)
    INTO orders VALUES(70005, 2400.6, TO_DATE('2012/07/27', 'YYYY/MM/DD'), 3007, 5001)
    INTO orders VALUES(70008, 5760, TO_DATE('2012/08/15', 'YYYY/MM/DD'), 3002, 5001)
    INTO orders VALUES(70010, 1983.43, TO_DATE('2012/10/10', 'YYYY/MM/DD'), 3004, 5006)
    INTO orders VALUES(70003, 2480.4, TO_DATE('2012/10/10', 'YYYY/MM/DD'), 3009, 5003)
    INTO orders VALUES(70012, 250.45, TO_DATE('2012/06/27', 'YYYY/MM/DD'), 3008, 5002)
    INTO orders VALUES(70011, 75.29, TO_DATE('2012/08/17', 'YYYY/MM/DD'), 3003, 5007)
    INTO orders VALUES(70013, 3045.6, TO_DATE('2012/04/25', 'YYYY/MM/DD'), 3002, 5001)
SELECT 1 FROM DUAL;

ACTIVITY 6
Once the table has been successfully created, write queries to output the following:

Get all salesman ids without any repeated values
Display the order number ordered by date in ascending order
Display the order number ordered by purchase amount in descending order
Display the full data of orders that have purchase amount less than 500.
Display the full data of orders that have purchase amount between 1000 and 2000.

ACTIVITY 7
In this activity we will using the orders table to perform aggregate operations using the set operators.

Write SQL queries to get the following results:

Write an SQL statement to find the total purchase amount of all orders.
Write an SQL statement to find the average purchase amount of all orders.
Write an SQL statement to get the maximum purchase amount of all the orders.
Write an SQL statement to get the minimum purchase amount of all the orders.
Write an SQL statement to find the number of salesmen listed in the table.

ACTIVITY 8
In this activity we will using the orders table to perform aggregate operations using GROUP BY.

Write SQL queries to get the following results:

Write an SQL statement to find the highest purchase amount ordered by the each customer with their ID and highest purchase amount.
Write an SQL statement to find the highest purchase amount on '2012-08-17' for each salesman with their ID.
Write an SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have a higher purchase amount within the list [2030, 3450, 5760, 6000].

ACTIVITY 9
In this activity we will using the salesman, orders, and the customers table to perform JOIN operations on both tables.

Before we start the activity, let us create the customers table:

-- Create the customers table
create table customers (
    customer_id int primary key, customer_name varchar(32),
    city varchar(20), grade int, salesman_id int);

-- Insert values into it
INSERT ALL
    INTO customers VALUES (3002, 'Nick Rimando', 'New York', 100, 5001)
    INTO customers VALUES (3007, 'Brad Davis', 'New York', 200, 5001)
    INTO customers VALUES (3005, 'Graham Zusi', 'California', 200, 5002)
    INTO customers VALUES (3008, 'Julian Green', 'London', 300, 5002)
    INTO customers VALUES (3004, 'Fabian Johnson', 'Paris', 300, 5006)
    INTO customers VALUES (3009, 'Geoff Cameron', 'Berlin', 100, 5003)
    INTO customers VALUES (3003, 'Jozy Altidor', 'Moscow', 200, 5007)
    INTO customers VALUES (3001, 'Brad Guzan', 'London', 300, 5005)
SELECT 1 FROM DUAL;

ACTIVITY 9
Now write the queries for the following:

Write an SQL statement to know which salesman are working for which customer.
Write an SQL statement to make a list in ascending order for the customer who holds a grade less than 300 and works either through a salesman.

Write an SQL statement to find the list of customers who appointed a salesman for their jobs who gets a commission from the company is more than 12%.
Write an SQL statement to find the details of a order i.e. order number, order date, amount of order, which customer gives the order and which salesman works for that customer and commission rate he gets for an order.

ACTIVITY 10
In this activity we will using the salesman, orders, and the customers table to perform Subquery operations on both tables.

Write queries for the following:

Write a query to find all the orders issued against the salesman who may works for customer whose id is 3007.
Write a query to find all orders attributed to a salesman in New York.
Write a query to count the customers with grades above New York's average.
Write a query to extract the data from the orders table for those salesman who earned the maximum commission


ACTIVITY 11
These are bonus activities that you can try:

Write a query that produces the name and number of each salesman and each customer with more than one current order. Put the results in alphabetical order.
Write a query to make a report of which salesman produce the largest and smallest orders on each date. Also add a column that shows "highest on" and "lowest on" values.



